> C++ 클래스 및 파생 블루프린트 클래스 활용
C++ 클래스의 성능 + Blueprint의 편의성 활용

> GameModeBase 통한 Unreal Engine 게임 프레임워크 
- Default Pawn Class
- PlayerController Class 

> Actor, Pawn, Character 상속 구조 및 Character 파생 클래스 컴포넌트 추가 
- SpringArm, Camera Component 및 UPROPERTY()

> PlayerController 클래스 SetUpInputComponent 입력 바인딩
UnrealEngine 4 InputComponent의 Action, Axis Bind

> Character 생명주기 
Constructor() 
PostInitProperties() -> CDO 기반 초기화
PreInitializeComponent() -> 컴포넌트 초기화 전
PostInitializeComponent()	-> 컴포넌트 초기화 직후
Posses() -> PlayerController 혹은 AIController 에게 Pawn이 소유됨.
SetupInputComponent() -> Character에서의 입력 바인딩
BeginPlay(), Tick(), EndPlay()

> AnimationInstance X Character X Controller 
언리얼 엔진에서 추구하는 코딩 스타일 공부 -> 기능을 해당하는 클래스를 상속하여서 만들고, 코드를 분해 
유니티와 언리얼 모두 컴포넌트를 부착하여서 기능을 추가하는 것도 중요하지만
언리얼 엔진은 상속 구조를 통해 개발되어있는 클래스들을 활용하는것이 중요한것 같다. (Actor, Pawn, Character, AnimationInstance, GameModeBase, etc...)
기존 클래스를 블루프린트로 파생시키서 비쥬얼 스크립팅이 가능한 것 또한 언리얼 엔진에서의 강점

> 애니메이션 블루프린트 활용 상태 머신

> 애니메이션 블랜드 스페이스 활용 걷기 ( 상, 하, 좌, 우 애니메이션 가중치에 따른 애니메이션 섞기 )
- Animation Blend Space

> 애니메이션 노티파이 활용 시작, 끝 동작 이벤트 처리
점프 시작과 점프 중 속도 적용 되다가, 노티파이 활용 착지 시에 키입력 및 속도 0으로 초기화
- Animation Notify

> Skeletal Mesh Component의 뼈 계층 확인 및 소켓 통한 투사체 발사
- Projectile Class : BoxComponent, StaticMeshComponent, ProjectileMovement
- Bone Socket
- Spawn Actor 

> WidgetComponent 부착 통한 Enemy 체력 시각화

> 몬스터 클래스 및 AI Controller 

> 네비게이션 매시 활용 이동

> Tick이 아닌, Timer 설정 동작 
